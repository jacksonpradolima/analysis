/*
 * Copyright 2016 Jackson Antonio do Prado Lima <jacksonpradolima at gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package br.ufpr.inf.gres.core.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Map;
import java.util.Properties;

import com.google.common.base.Preconditions;

/**
 * Properties Utils Class
 *
 * @author Thiago Nascimento
 * @since 2015-10-26
 * @version 1.0.0
 */
public class PropertiesUtils {

    /**
     * Read a java properties file
     *
     * @param filename
     * @return a Properties Object
     * @throws IOException
     */
    public static Properties getFromFile(File filename) throws IOException {
        return getFromFile(filename.getAbsolutePath());
    }

    /**
     * Read a java properties file
     *
     * @param filename
     * @return a Properties Object
     * @throws IOException
     */
    public static Properties getFromFile(String filename) throws IOException {
        Preconditions.checkNotNull(filename, "Filename cannot be null");
        Preconditions.checkArgument(!filename.isEmpty(), "Filename cannot be empty");
        Preconditions.checkArgument(!new File(filename).isDirectory(), "Filename cannot be a directory");

        Properties properties = new Properties();

        FileInputStream file = new FileInputStream(filename);
        properties.load(file);

        file.close();

        return properties;
    }

    /**
     * Save a java properties file
     *
     * @param output Filename
     * @param properties Properties that you be saved
     * @throws IOException
     */
    public static void save(File output, Properties properties) throws IOException {
        save(output, properties, "Generated by thiagodnf.core");
    }

    /**
     * Save a java properties file
     *
     * @param output Filename
     * @param properties Properties that you be saved
     * @param comments Comments that you be save at the file
     * @throws IOException
     */
    public static void save(File output, Properties properties, String comments) throws IOException {
        Preconditions.checkNotNull(output, "Output cannot be null");
        Preconditions.checkNotNull(properties, "Properties cannot be null");
        Preconditions.checkNotNull(comments, "Comments cannot be null");
        Preconditions.checkArgument(!output.isDirectory(), "Output cannot be a directory");

        OutputStream out = new FileOutputStream(output);

        properties.store(out, comments);

        out.close();
    }

    /**
     * Save a java properties file using hashmap values
     *
     * @param output Filename
     * @param properties Properties that you be saved
     * @param comments Comments that you be save at the file
     * @throws IOException
     */
    public static void save(File output, Map<String, String> values) throws IOException {
        save(output, ConvertUtils.toPropertiesFile(values));
    }
}
